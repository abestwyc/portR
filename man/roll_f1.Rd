% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trick_roll_fun.R
\name{roll_f1}
\alias{roll_f1}
\title{Group-rolling Apply}
\usage{
roll_f1(DT, X, Group, Width, MinObs, FUN, ...)
}
\arguments{
\item{DT}{A data.table or data.frame, must contains X and Group.}

\item{X}{Single Character, temporarily.}

\item{Group}{Single Character, specify the rolling-group variable (usually a time variable like
year, month, week, etc).}

\item{Width}{Positive integer, the rolling calculation window length.}

\item{MinObs}{Positive integer, with minimum number of observation that are required in a window.}

\item{FUN}{The function to be applied to each rolling widow, this function can only return a
single value. Please note that the name of \code{FUN} cannot be the same as the
variable name in the data!!!}

\item{...}{Additional parameters of the FUN function.}
}
\value{
A numeric vector of the same length as the input.
}
\description{
A apply-like function for computing the group-rolling values of time-series data.
}
\details{
Simple rolling calculation functions usually use a fixed number of observations.
We provide a way to perform rolling calculations with a fixed number of groups, not
observations.

Currently, we can only use a single variable to calculate a single value.

The difference between this function and other rolling calculation functions is that
we do not roll with a fixed number of observations, but with a fixed specified
grouping variable. For example, in build-in data \code{stock}, we want to calculate
recent five years' average return by using monthly data. Then we can use this
function, in \code{examples}.

Usage of this function in empirical asset pricing research also includes calculating
MACD, idiosyncratic volatility, idiosyncratic skewness, etc.
}
\examples{
# Use rolling function with data.table
stock1 <- stock
stock1[ , rollMean := roll_f1(DT = .SD,
                              X = "return",
                              Group = "year",
                              Width = 5,
                              MinObs = 45,
                              FUN = mean, na.rm = TRUE), by = stkcd]

}
